



def test_models(self,xtrain,ytrain,xval,yval,\
                  activation, derivation, batch_size,\
                  epochs=1000, early_stop_tol = 0, early_stop_nochange=50, \
                  mode = 'classification', regularization = 'l1'):

      n_features=xtrain.shape[1]
      best_net = object()


      train_accuracy = np.ones((len(etavec), len(lmbvec)))*1000
      for i, etas in enumerate(etavec):
          for j, lmb in enumerate(lmbvec):
              np.random.seed(2019)
              neural_net = nn.ANN(lmb=lmb, bias=0, eta=etas, early_stop_tol = 0, early_stop_nochange=50, mode = 'classification', regularization = 'l1')
              neural_net.add_layers(n_features=[91,50,20], n_neurons = [50,20,1] , n_layers=3)
              neural_net.train(epochs, batch_size, xtrain,ytrain,activation,derivative xval, yval, verbose=False)

              pred = neural_net.feed_out(xval, activation)
              train_accuracy[i,j] =  lrf.cost_log_ols(pred.ravel(),yval.T)
              if train_accuracy[i,j]<np.min(train_accuracy):
                  best_net = neural_net

              print('Validation loss for', '\u03B7 =', etas, '&', '\u03BB =', lmb, '=', train_accuracy [i,j])
